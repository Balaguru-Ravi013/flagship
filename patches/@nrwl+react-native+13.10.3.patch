diff --git a/node_modules/@nrwl/react-native/plugins/metro-resolver.js b/node_modules/@nrwl/react-native/plugins/metro-resolver.js
index d65a764..fd83b8c 100644
--- a/node_modules/@nrwl/react-native/plugins/metro-resolver.js
+++ b/node_modules/@nrwl/react-native/plugins/metro-resolver.js
@@ -22,8 +22,7 @@ function getResolveRequest(extensions) {
             console.log(chalk.cyan(`[Nx] Resolving: ${moduleName}`));
         const { resolveRequest } = _context, context = tslib_1.__rest(_context, ["resolveRequest"]);
         const resolvedPath = defaultMetroResolver(context, moduleName, platform) ||
-            tsconfigPathsResolver(context, extensions, realModuleName, moduleName, platform) ||
-            pnpmResolver(extensions, context, realModuleName, moduleName);
+            tsconfigPathsResolver(context, extensions, realModuleName, moduleName, platform);
         if (resolvedPath) {
             return resolvedPath;
         }
@@ -53,9 +52,9 @@ function defaultMetroResolver(context, moduleName, platform) {
 function pnpmResolver(extensions, context, realModuleName, moduleName) {
     const DEBUG = process.env.NX_REACT_NATIVE_DEBUG === 'true';
     try {
-        const pnpmResolver = getPnpmResolver(devkit_1.workspaceRoot, extensions);
+        const pnpmResolver = getPnpmResolver(devkit_1.workspaceRoot, extensions, context.mainFields);
         const lookupStartPath = (0, path_1.dirname)(context.originModulePath);
-        const filePath = pnpmResolver.resolveSync({}, lookupStartPath, realModuleName);
+        const filePath = pnpmResolver.resolveSync(context, lookupStartPath, realModuleName);
         if (filePath) {
             return { type: 'sourceFile', filePath };
         }
@@ -111,7 +110,7 @@ function getMatcher() {
  * It is inspired form https://github.com/vjpr/pnpm-expo-example/blob/main/packages/pnpm-expo-helper/util/make-resolver.js.
  */
 let resolver;
-function getPnpmResolver(workspaceRoot, extensions) {
+function getPnpmResolver(workspaceRoot, extensions, mainFields) {
     if (!resolver) {
         const fileSystem = new enhanced_resolve_1.CachedInputFileSystem(fs, 4000);
         resolver = enhanced_resolve_1.ResolverFactory.createResolver({
@@ -119,6 +118,7 @@ function getPnpmResolver(workspaceRoot, extensions) {
             extensions: extensions.map((extension) => '.' + extension),
             useSyncFileSystemCalls: true,
             modules: [(0, path_1.join)(workspaceRoot, 'node_modules'), 'node_modules'],
+            mainFields,
         });
     }
     return resolver;
